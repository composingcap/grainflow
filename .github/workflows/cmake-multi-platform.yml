# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    branches: [ "master", "f/ci_builds" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: true


      matrix:
        os: [macos-latest, windows-latest]
        build_type: [Release]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: macos-latest
            c_compiler: clang
            cpp_compiler: clang++

    steps:
    - uses: actions/checkout@v4
    - name: Checkout submodules
      run: git submodule update --init --recursive
    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: | 
        cmake -B Build -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: |
        cmake --build Build --config ${{ matrix.build_type }}

    #- name: Test
    #  working-directory: ${{ steps.strings.outputs.build-output-dir }}
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
    #  run: ctest --build-config ${{ matrix.build_type }}
    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v4
      with:
        name: Grainflow-${{ matrix.os }}
        path: ./externals/*   
        retention-days: 0
        compression-level: 6
        overwrite: true
        include-hidden-files: false

  merge:
    runs-on: macos-latest
    needs: [build]
    steps:
      - name: Checkout
        uses: actions/checkout@v2.3.4
      - name: download-win-externals
        uses: actions/download-artifact@v4
        with: 
          name: Grainflow-windows-latest
          path: ./externals
      - name: download-mac-externals   
        uses: actions/download-artifact@v4
        with: 
          name: Grainflow-macos-latest
          path: ./externals
      - name: Make-MaxPack
        run: | 
          python3 create_release.py pack
      - name: Upload-MaxPack
        uses: actions/upload-artifact@v4
        with:
          name: GrainflowPackage
          path: ./grainflow.maxpack

          