<?xml version='1.0' encoding='utf-8' standalone='yes'?>
<?xml-stylesheet href="./c74ref.xsl" type="text/xsl"?>

<c74object name='grainflow.chorus~' module="msp" category="grainflow, MSP Proccessing">

	<digest>A simple granular chorus effect. </digest>
	<description>
	</description>


	<!--METADATA-->

	<metadatalist>
		<metadata name='author'>Christopher Poovey</metadata>
		<metadata name='tag'>Grainflow</metadata>
		<metadata name='tag'>Granulation</metadata>
		<metadata name='tag'>MSP</metadata>

	</metadatalist>
<!--INLETS-->
	<inletlist>



		<inlet id="0" type="signal/multichannelsignal">
			<digest>
				Signal to be chorused.
			</digest>
		</inlet>
	</inletlist>

	<!--OUTLETS-->
	<outletlist>
		<outlet id="0" type="multichannelsignal">
			<digest>
			Grains each as their own channel.
			</digest>
			<description>
			</description>
		</outlet>
		<outlet id="1" type="list">
			<digest>
			Grain information
			</digest>
			<description>
				Can be routed by the following:
				grainState - 1 if the grain is active 0 if it is in "space"
				grainProgress - the progress of a grain from 0 - 1
				grainPosition - the position of the grain withing the buffer from 0 - 1
				grainAmp - the amplitude of the grain from 0 - 1
				grainWindow - the amplitude of the grain window (envelope) from 0 - 1
				buffername - the name of the primary buffer being granulated from (it is possible to assign different buffers to different grains)
			</description>
		</outlet>
	</outletlist>

	<!--ARGUMENTS-->

	<objarglist>
		<objarg name="chorus-value" optional="0" type="symbol">
			<digest>Intensity of the chorus effect</digest>
		</objarg>
<objarg name="buffer-size" optional="0" type="symbol">
	<digest>The size of the internal buffer</digest>
</objarg>
<objarg name="grains" optional="0" type="int">
	<digest>The number of grains</digest>
</objarg>
	</objarglist>


	<!--MESSAGES-->

	<methodlist>

		<method name='int'>
			<digest>Sets the state of the chorus</digest>
		</method>

		<method name='float'>
			<digest>sets the chorus value</digest>
		</method>


		<method name='---any-grainflow-param---'>
			<digest>Below are standard grainflow parameters. They will all work unless they are overwritten by an internal parameter. </digest>
			<description></description>
		</method>

		<method name='ngrains'>
			<digest>Sets the number of active grains. This may not exceed the maxiumum graincount.</digest>
			<description></description>
		</method>

		<method name='voices'>
			<digest>Sets the maximum number of grains</digest>
			<description></description>
		</method>

		<method name='grain'>
			<digest>Followed by an integer and a message- send this message to a specific grain.</digest>
			<description></description>
		</method>

		<method name='env'>
			<digest>Sets the grain envelope to a named buffer.</digest>
			<description></description>
		</method>

		<method name='amp'>
			<digest>Grain Volume from 0 - 1</digest>
			<description></description>
		</method>

		<method name='ampRandom'>
			<digest>Random Grain Volume from 0 - 1 - only attenuates</digest>
			<description></description>
		</method>

		<method name='windowOffset'>
			<digest>The offset position of each subsequent grain on the grain phasor from 0 - 1</digest>
			<description></description>
		</method>

		<method name='windowOffsetRandom'>
			<digest>Randomness applied to the offset position of each subsequent grain on the grain phasor</digest>
			<description></description>
		</method>

		<method name='space'>
			<digest>Sets the amount of empty space per grain on the phasor</digest>
			<description>If this is 0, there each grain will take the entire phasor to complete.  If it is 0.5, the grain will occur for half of the phasor length</description>
		</method>

		<method name='spaceRandom'>
			<digest>Randomness applied to space</digest>
		</method>

		<method name='density'>
			<digest>Randomness applied to space</digest>
		</method>


		<method name='travOffset'>
			<digest>Traversal offset per grain in ms</digest>
			<description></description>
		</method>

		<method name='travRandom'>
			<digest>Random traversal in ms</digest>
			<description></description>
		</method>
		<method name='travGlobalOffset'>
			<digest>
				A global offset to the traversal in ms.
			</digest>
		</method>
		<method name='rate'>
			<digest>The playback rate of the samples within each grain. Will cause a pitch shift.</digest>
			<description></description>
		</method>

		<method name='rateRandom'>
			<digest>Random playback rate of the samples within each grain.</digest>
			<description></description>
		</method>

		<method name='direction'>
			<digest>The probabilistic direction of each grain 1 is always forward -1 is always backward.</digest>
			<description></description>
		</method>

		<method name='rateOffset'>
			<digest>The playback rate of the samples within each grain per each subsequent grain./</digest>
			<description></description>
		</method>

		<method name='glisson'>
			<digest>A glissando from the initial rate to n+ the initial rate over the duration of the grain.</digest>
			<description></description>
		</method>

		<method name='glissonRandom'>
			<digest>Randomness applied to glisson in rate.</digest>
			<description></description>
		</method>

		<method name='rateQuantizeSemi'>
			<digest>Will quantize rates to semitones.</digest>
			<description></description>
		</method>

		<method name='travMode'>
			<digest>Will set the traversal mode to one of the following
				0: Traversal by messages (default)
				1: Traversal from buffer read by voices
				2: Traversal from buffer read randomly per grain
			</digest>
			<description>
				This is useful when needing to dial in very specic traversals to design sounds.  The buffer can be set using the travOffsets message.
			</description>
		</method>

		<method name='travOffsets'>
			<digest>
				Sets the traversal buffers for travMode 1 and 2.
			</digest>
		</method>

		<method name='rateMode'>
			<digest>Will set the rate mode to one of the following
				0: Rate by messages (default)
				1: Rate from buffer read by voices
				2: Rate from buffer read randomly per grain
			</digest>
			<description>
				This is useful when needing to dial in very specic rates to design sounds.  The buffer can be set using the travOffsets message.
			</description>
		</method>

		<method name='rates'>
			<digest>
				Sets the rate buffers for rateMode 1 and 2
			</digest>
		</method>



		<method name='envMode'>
			<digest>
				Sets how envelopes are read to one of the following:
				0: reads from a buffer containing 1 envelope (default)
				1: Reads an envelope from buffer organized as a 2D wavetable read by voices
				2 : does not exist but should be random like the others
			</digest>
		</method>

		<method name='env2D'>
			<digest>
				A buffer containing a 2D envelope wavetable for envMode 1.
			</digest>
		</method>

		<method name='env2DNumber'>
			<digest>
				The number of envelopes in the 2D wavetable.
			</digest>
		</method>

	<method name='env2DPosition'>
		<digest>
			The overall position in the 2Denv buffer.
		</digest>
	</method>


<method name='env2DRandom'>
	<digest>
		The randomness applied to the position the 2Denv buffer.
	</digest>
</method>

<method name='windowOffsetMode'>
	<digest>
		Will set the rate mode to one of the following
			0: windowOffset by messages (default)
			1: windowOffset from buffer read by voices
			2: windowOffset from buffer read randomly per grain
	</digest>
</method>

	<method name='windowReadBias'>
		<digest>
			Will read the grain window as a polynomial. This is expensive and should be avoided if unnecessary.
		</digest>
</method>



	</methodlist>


	<!--ATTRIBUTES-->

	<attributelist>
		<attribute name='any-message' get='0' set='1' type='anything' size='1' >
				 <digest>Any message can be set on instantiation as an attribute.</digest>
		 </attribute>
	</attributelist>


	<!--RELATED-->

	<seealsolist>
		<seealso name='grainflow.freeze~' />
		<seealso name='grainflow.harmonize~' />
		<seealso name='grainflow.synth~' />
		<seealso name='grainflow.scrubSynth~' />
	</seealsolist>


</c74object>
